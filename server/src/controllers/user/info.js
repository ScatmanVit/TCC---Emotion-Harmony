// ImportaÃ§Ã£o das classes e instÃ¢ncias necessÃ¡rias
const { CustomError } = require("../../class/class");
const { prisma } = require("../../prismaFunctions/prisma");

// FunÃ§Ã£o para obter informaÃ§Ãµes completas de um usuÃ¡rio
async function getUserInfo(req, res) {
  try {
    // ğŸ”¹ IdentificaÃ§Ã£o do usuÃ¡rio:
    // Se houver `id` nos parÃ¢metros da rota, usa ele. Caso contrÃ¡rio, usa o `id_user` do token JWT
    let id_user = req.params.id || req.user.id_user;

    // ğŸ”¹ Busca no banco de dados:
    // Busca o usuÃ¡rio com base no ID e inclui informaÃ§Ãµes relacionadas (relacionamentos do Prisma)
    const userInfo = await prisma.tb_users.findUnique({
      where: {
        id_user: Number(id_user),
      },
      include: {
        phones_user: true,
        meditations_user: true,
        breaths_user: true,
        todays_user: true,
      },
    });

    // ğŸ”¹ Tratamento de erro caso o usuÃ¡rio nÃ£o seja encontrado
    if (!userInfo) throw new CustomError("UsuÃ¡rio nÃ£o encontrado", 404);

    // ğŸ”¹ Resposta de sucesso
    return res.status(200).json(userInfo);
  } catch (error) {
    // ğŸ”¹ Tratamento de erros
    console.error({ error });

    // Resposta de erro personalizada ou genÃ©rica
    return res.status(error.status || 500).json({ error: error.message });
  }
}

// Exporta a funÃ§Ã£o para ser usada em rotas
module.exports = getUserInfo;
