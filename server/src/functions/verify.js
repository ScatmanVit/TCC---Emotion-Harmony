// âœ… FunÃ§Ã£o para verificar se todos os campos obrigatÃ³rios foram preenchidos
// Retorna o nome do primeiro campo vazio encontrado ou `false` se todos estiverem preenchidos
const verifyInput = (inputs) => {
  for (let input in inputs) {
    if (!inputs[input]) {
      return input; // Retorna o nome do campo que estÃ¡ vazio
    }
  }
  return false; // Nenhum campo vazio
};

// ðŸ“§ FunÃ§Ã£o para validar formato de e-mail usando regex
const verifyEmail = (email) => {
  const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
  if (!emailRegex.test(email)) {
    return false; // Formato invÃ¡lido
  }
  return true; // Formato vÃ¡lido
};

// ðŸ‡§ðŸ‡· FunÃ§Ã£o para validar CPF (Cadastro de Pessoa FÃ­sica)
const verifyCPF = (cpf) => {
  // ðŸ”¹ Remove caracteres nÃ£o numÃ©ricos
  cpf = cpf.replace(/\D/g, "");

  // ðŸ”¹ Verifica se o CPF tem 11 dÃ­gitos
  if (cpf.length !== 11) return false;

  // ðŸ”¹ Rejeita CPFs com todos os dÃ­gitos iguais (ex: 111.111.111-11)
  if (/^(\d)\1{10}$/.test(cpf)) return false;

  // ðŸ”¹ FunÃ§Ã£o auxiliar para cÃ¡lculo dos dÃ­gitos verificadores
  const calcDigit = (slice) => {
    let sum = slice
      .split("")
      .reduce((acc, num, index) => acc + num * (slice.length + 1 - index), 0);
    let remainder = (sum * 10) % 11;
    return remainder === 10 ? 0 : remainder;
  };

  // ðŸ”¹ Calcula e compara os dÃ­gitos verificadores
  const digit1 = calcDigit(cpf.slice(0, 9));
  const digit2 = calcDigit(cpf.slice(0, 10));

  return digit1 == cpf[9] && digit2 == cpf[10]; // Retorna true se CPF for vÃ¡lido
};

// ðŸš€ Exporta todas as funÃ§Ãµes para uso em outros mÃ³dulos
module.exports = { verifyInput, verifyEmail, verifyCPF };
