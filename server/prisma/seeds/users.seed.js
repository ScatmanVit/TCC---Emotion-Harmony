// üì¶ Importa√ß√µes
const { colors } = require("../../src/functions/colors"); // C√≥digos de cores para console
const { prisma } = require("../../src/prismaFunctions/prisma"); // Prisma Client para acesso ao banco
const users = require("../data"); // Lista de usu√°rios a serem inseridos

// üå± Fun√ß√£o de seed para inserir usu√°rios no banco de dados
module.exports = async function seedUsers() {
  try {
    // üîπ Busca todos os usu√°rios existentes no banco (para evitar duplicatas)
    const usersDb = await prisma.tb_users.findMany();

    // üîÅ Itera sobre os usu√°rios do arquivo de dados
    for (const user of users) {
      // üîç Verifica se o e-mail j√° est√° cadastrado no banco
      const userExists = usersDb.some(
        (userDb) => userDb.email_user === user.email_user
      );

      // ‚ö† Caso o usu√°rio j√° exista, apenas loga uma mensagem
      if (userExists) {
        console.log(
          `${colors.yellow}‚ö† Usu√°rio ${user.name_user} j√° existe no banco.${colors.reset}`
        );
      } else {
        // ‚úÖ Se n√£o existir, cria o usu√°rio com todos os dados relacionados
        await prisma.tb_users.create({
          data: {
            name_user: user.name_user,
            email_user: user.email_user,
            cpf_user: user.cpf_user,
            password_user: user.password_user,
            type_user: user.type_user,
            active_user: user.active_user,

            // üìû Telefones vinculados ao usu√°rio
            phones_user: {
              create:
                user.phones_user?.map(
                  ({
                    type_phone,
                    country_code_phone,
                    area_code_phone,
                    phone_number,
                  }) => ({
                    type_phone,
                    country_code_phone,
                    area_code_phone,
                    phone_number,
                  })
                ) || [],
            },

            // üßò Medita√ß√µes vinculadas ao usu√°rio
            meditations_user: {
              create:
                user.meditations_user?.map(
                  ({
                    description_meditation,
                    think_today_meditation,
                    emotion_meditation,
                    caracter_meditation,
                    type_situation_meditation,
                    created_at,
                  }) => ({
                    description_meditation,
                    think_today_meditation,
                    emotion_meditation,
                    caracter_meditation,
                    type_situation_meditation,
                    created_at,
                  })
                ) || [],
            },

            // üå¨Ô∏è Respira√ß√µes vinculadas ao usu√°rio
            breaths_user: {
              create:
                user.breaths_user?.map(
                  ({
                    finished_breath,
                    felt_betther_breath,
                    description_breath,
                    created_at,
                  }) => ({
                    finished_breath,
                    felt_betther_breath,
                    description_breath,
                    created_at,
                  })
                ) || [],
            },

            // üòå Emo√ß√µes di√°rias vinculadas ao usu√°rio
            todays_user: {
              create:
                user.todays_user?.map(
                  ({
                    emotion_today,
                    description_today,
                    morning_afternoon_evening,
                    created_at,
                  }) => ({
                    emotion_today,
                    description_today,
                    morning_afternoon_evening,
                    created_at,
                  })
                ) || [],
            },
          },
        });

        // ‚úÖ Loga sucesso ap√≥s criar usu√°rio
        console.log(
          `${colors.green}‚úÖ Usu√°rio ${user.name_user} criado com sucesso.${colors.reset}`
        );
      }
    }
  } catch (error) {
    // ‚ùå Em caso de erro, exibe no console
    console.error({ error });

    // Alternativa com cores para mensagens de erro:
    console.error(
      `${colors.red}‚ùå Erro ao inserir usu√°rios:${colors.reset}`,
      error
    );
  }
};
