// 📘 Arquivo de schema do Prisma
// Saiba mais em: https://pris.ly/d/prisma-schema

// 📦 Geração do client do Prisma (utilizado para acessar o banco via código)
generator client {
  provider = "prisma-client-js"
}

// 🔗 Configuração da fonte de dados (MySQL neste caso)
datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL") // URL definida no .env
}

// 🔘 Enumeração para tipos de usuário
enum Type_user {
  user // Usuário comum
  admin // Administrador do sistema
}

// 🔘 Enumeração para tipos de telefone/contato
enum Type_contacts {
  casa
  trabalho
  celular
  emergencia
}

// 🔘 Enumeração para tipos de emoções registradas
enum Type_emotion {
  Felicidade
  Tristeza
  Raiva
  Desgosto
  Medo
}

// 🔘 Enumeração para tipos de situação (utilizada em meditações)
enum type_situation {
  boa
  ruim
}

// 🔘 Enumeração para o período do dia
enum Type_day {
  manhã
  tarde
  noite
}

// 🧑‍💻 Modelo de usuário principal do sistema
model tb_users {
  id_user                 Int             @id @default(autoincrement())
  name_user               String          @db.VarChar(100)
  email_user              String          @unique @db.VarChar(50)
  cpf_user                String          @unique @db.VarChar(11)
  password_user           String          @db.VarChar(255)
  password_changed        Boolean         @default(false) // Indica se a senha foi alterada após login
  lost_pasword_token_user String?         @db.VarChar(255) // Token de recuperação de senha
  active_user             Boolean         @default(true)
  type_user               Type_user       @default(user) // admin ou user
  phones_user             tb_phone[] // Relação com tabela de telefones
  meditations_user        tb_meditation[] // Relação com meditações
  breaths_user            tb_breath[] // Relação com respirações
  todays_user             tb_today[] // Relação com emoções do dia
  last_login_date_user    DateTime?
  created_at              DateTime        @default(now())
  updated_at              DateTime        @updatedAt
}

// ☎️ Modelo para os telefones dos usuários
model tb_phone {
  id_phone           Int           @id @default(autoincrement())
  type_phone         Type_contacts @default(celular)
  country_code_phone Int           @default(55)
  area_code_phone    Int
  phone_number       Int
  users_id           Int
  users              tb_users      @relation(fields: [users_id], references: [id_user], onDelete: Cascade)
  created_at         DateTime      @default(now())
  updated_at         DateTime      @updatedAt
}

// 📅 Modelo para registros de emoções diárias
model tb_today {
  id_today                  Int          @id @default(autoincrement())
  emotion_today             Type_emotion
  description_today         String?      @db.Text
  morning_afternoon_evening Type_day // Manhã, tarde ou noite
  users_id                  Int
  users                     tb_users     @relation(fields: [users_id], references: [id_user], onDelete: Cascade)
  created_at                DateTime     @default(now())
  updated_at                DateTime     @updatedAt
}

// 🧘 Modelo para registros de meditação
model tb_meditation {
  id_meditation             Int            @id @default(autoincrement())
  description_meditation    String         @db.Text
  think_today_meditation    String         @db.Text
  emotion_meditation        Type_emotion
  caracter_meditation       String         @db.Text
  type_situation_meditation type_situation
  users_id                  Int
  users                     tb_users       @relation(fields: [users_id], references: [id_user], onDelete: Cascade)
  created_at                DateTime       @default(now())
  updated_at                DateTime       @updatedAt
}

// 🌬️ Modelo para registros de respiração
model tb_breath {
  id_breath           Int      @id @default(autoincrement())
  finished_breath     Boolean  @default(true) // Se o exercício foi finalizado
  felt_betther_breath Boolean  @default(true) // Se a pessoa se sentiu melhor
  description_breath  String   @db.Text
  users_id            Int
  users               tb_users @relation(fields: [users_id], references: [id_user], onDelete: Cascade)
  created_at          DateTime @default(now())
  updated_at          DateTime @updatedAt
}
